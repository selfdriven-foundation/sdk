"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.poolsByIdUpdates = exports.poolsByIdBlocks = exports.poolsByIdDelegators = exports.poolsByIdRelays = exports.poolMetadata = exports.poolsByIdHistory = exports.poolsById = exports.poolsRetiring = exports.poolsRetired = exports.pools = void 0;
const utils_1 = require("../../../utils");
async function pools(pagination) {
    const paginationOptions = utils_1.getPaginationOptions(pagination);
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools`, {
            params: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.pools = pools;
async function poolsRetired(pagination) {
    const paginationOptions = utils_1.getPaginationOptions(pagination);
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools/retired`, {
            params: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.poolsRetired = poolsRetired;
async function poolsRetiring(pagination) {
    const paginationOptions = utils_1.getPaginationOptions(pagination);
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools/retiring`, {
            params: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.poolsRetiring = poolsRetiring;
async function poolsById(poolId) {
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools/${poolId}`)
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.poolsById = poolsById;
async function poolsByIdHistory(poolId, pagination) {
    const paginationOptions = utils_1.getPaginationOptions(pagination);
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools/${poolId}/history`, {
            params: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.poolsByIdHistory = poolsByIdHistory;
async function poolMetadata(poolId) {
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools/${poolId}/metadata`)
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.poolMetadata = poolMetadata;
async function poolsByIdRelays(poolId) {
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools/${poolId}/relays`)
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.poolsByIdRelays = poolsByIdRelays;
async function poolsByIdDelegators(poolId, pagination) {
    const paginationOptions = utils_1.getPaginationOptions(pagination);
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools/${poolId}/delegators`, {
            params: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.poolsByIdDelegators = poolsByIdDelegators;
async function poolsByIdBlocks(poolId, pagination) {
    const paginationOptions = utils_1.getPaginationOptions(pagination);
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools/${poolId}/blocks`, {
            params: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.poolsByIdBlocks = poolsByIdBlocks;
async function poolsByIdUpdates(poolId, pagination) {
    const paginationOptions = utils_1.getPaginationOptions(pagination);
    return new Promise((resolve, reject) => {
        this.axiosInstance(`${this.apiUrl}/pools/${poolId}/updates`, {
            params: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.data);
        })
            .catch(err => {
            reject(utils_1.handleError(err));
        });
    });
}
exports.poolsByIdUpdates = poolsByIdUpdates;
